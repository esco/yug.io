// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define((function() {
    Backbone.Marionette.KL = {};
    Backbone.Marionette.KL.AccordionRegion = (function(_super) {

      __extends(AccordionRegion, _super);

      function AccordionRegion(regionConfig, parent) {
        this.getEl = __bind(this.getEl, this);

        this.show = __bind(this.show, this);

        var atts, className, firstChar, selectorName;
        this.regionConfig = regionConfig;
        this.parent = parent;
        atts = '';
        selectorName = regionConfig.selector.substr(1, regionConfig.selector.length);
        firstChar = regionConfig.selector.charAt(0);
        if (firstChar === '.') {
          className = ' ' + regionConfig.selector;
        } else if (firstChar === '#') {
          atts += ' id = "' + selectorName + '" ';
        }
        this.accordionView = new Backbone.Marionette.KL.AccordionView({
          view: regionConfig.view,
          className: className,
          title: regionConfig.title
        });
        this.el = regionConfig.selector;
        AccordionRegion.__super__.constructor.apply(this, arguments);
      }

      AccordionRegion.prototype.show = function(view) {
        if (view) {
          this.accordionView.$el.remove();
          this.accordionView = view;
        }
        this.parent.$el.append(this.accordionView.render().el);
        return AccordionRegion.__super__.show.call(this, this.accordionView);
      };

      AccordionRegion.prototype.getEl = function(selector) {
        return this.parent.$(selector);
      };

      return AccordionRegion;

    })(Backbone.Marionette.Region);
    Backbone.Marionette.KL.AccordionLayout = (function(_super) {

      __extends(AccordionLayout, _super);

      function AccordionLayout() {
        this.close = __bind(this.close, this);

        this.open = __bind(this.open, this);

        this.disable = __bind(this.disable, this);

        this.enable = __bind(this.enable, this);

        this.toggleSections = __bind(this.toggleSections, this);

        this.onShow = __bind(this.onShow, this);

        this.addRegions = __bind(this.addRegions, this);

        this.initialize = __bind(this.initialize, this);
        return AccordionLayout.__super__.constructor.apply(this, arguments);
      }

      AccordionLayout.prototype.className = 'kl-accordion';

      AccordionLayout.prototype.ui = {
        toggles: '.accordion-toggle'
      };

      AccordionLayout.prototype.showFirst = true;

      AccordionLayout.prototype.enabled = true;

      AccordionLayout.prototype.initialize = function(options) {
        this.model = new Backbone.Model({
          enabled: this.enabled,
          showFirst: this.showFirst
        });
        return this.addRegions(this.dynamicRegions);
      };

      AccordionLayout.prototype.addRegions = function(dynamicRegions) {
        var dynamicRegionManager, regionConfig, region_name, _results;
        if (!this.dynamicRegionManagers) {
          this.dynamicRegionManagers = {};
        }
        if (!dynamicRegions) {
          dynamicRegions = {};
        }
        _results = [];
        for (region_name in dynamicRegions) {
          regionConfig = dynamicRegions[region_name];
          dynamicRegionManager = new Backbone.Marionette.KL.AccordionRegion(regionConfig, this);
          this.dynamicRegionManagers[region_name] = dynamicRegionManager;
          _results.push(this[region_name] = dynamicRegionManager);
        }
        return _results;
      };

      AccordionLayout.prototype.onShow = function() {
        var first, region, regionName, _results;
        if (!this.accordionViews) {
          this.accordionViews = [];
        }
        first = this.model.get('showFirst');
        _results = [];
        for (regionName in this.dynamicRegionManagers) {
          region = this.dynamicRegionManagers[regionName];
          if (region.regionConfig.view) {
            if (!this.model.get('enabled')) {
              region.accordionView.disable();
            }
            if (first) {
              region.accordionView.model.set('show', true);
              first = false;
            }
            region.show();
            region.accordionView.on('selected', this.toggleSections);
            _results.push(this.accordionViews.push(region.accordionView));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      AccordionLayout.prototype.toggleSections = function(selected) {
        var view, _i, _len, _ref;
        if (this.model.get('enabled')) {
          if (selected.model.get('show')) {
            return selected.model.set('show', false);
          } else {
            _ref = this.accordionViews;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              view = _ref[_i];
              if (view !== selected) {
                view.model.set('show', false);
              }
            }
            return selected.model.set('show', true);
          }
        }
      };

      AccordionLayout.prototype.enable = function() {
        var view, _i, _len, _ref, _results;
        this.model.set('enabled', true);
        _ref = this.accordionViews;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          view = _ref[_i];
          _results.push(view.enable());
        }
        return _results;
      };

      AccordionLayout.prototype.disable = function() {
        var view, _i, _len, _ref, _results;
        this.model.set('enabled', false);
        _ref = this.accordionViews;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          view = _ref[_i];
          _results.push(view.disable());
        }
        return _results;
      };

      AccordionLayout.prototype.open = function(index) {
        if (this.model.get('enabled')) {
          if (!index) {
            index = 0;
          }
          if (this.accordionViews.length > index && index >= 0) {
            return this.toggleSections(this.accordionViews[index]);
          }
        }
      };

      AccordionLayout.prototype.close = function(index) {
        var view, _i, _len, _ref, _results;
        if (index == null) {
          index = null;
        }
        if (index === null) {
          _ref = this.accordionViews;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            view = _ref[_i];
            _results.push(view.hide());
          }
          return _results;
        } else {
          return this.accordionViews[index].hide();
        }
      };

      return AccordionLayout;

    })(Backbone.Marionette.Layout);
    return Backbone.Marionette.KL.AccordionView = (function(_super) {

      __extends(AccordionView, _super);

      function AccordionView() {
        this.toggleBody = __bind(this.toggleBody, this);

        this.hide = __bind(this.hide, this);

        this.show = __bind(this.show, this);

        this.onToggleEnabled = __bind(this.onToggleEnabled, this);

        this.disable = __bind(this.disable, this);

        this.enable = __bind(this.enable, this);

        this.onShow = __bind(this.onShow, this);
        return AccordionView.__super__.constructor.apply(this, arguments);
      }

      AccordionView.prototype.template = '<div class="kl-accordion-section">\
                  <div class="kl-accordion-heading"><h3><%=title%></h3> <span class="toggle-buttons pull-right"><a class="accordion-toggle">Open</a></span></div>\
                  <div class="kl-accordion-body"></div>\
                  </div>\
                </div>';

      AccordionView.prototype.ui = {
        head: '.kl-accordion-heading',
        body: '.kl-accordion-body',
        toggle: '.accordion-toggle'
      };

      AccordionView.prototype.regions = {
        body: '.kl-accordion-body'
      };

      AccordionView.prototype.enabled = true;

      AccordionView.prototype.initialize = function(options) {
        this.view = options.view;
        return this.model = new Backbone.Model({
          'title': options.title,
          'show': false,
          'enabled': true
        });
      };

      AccordionView.prototype.onShow = function() {
        var _this = this;
        this.ui.toggle.on('click', function() {
          return _this.trigger('selected', _this);
        });
        if (!this.model.get('show')) {
          this.ui.body.hide();
        } else {
          this.ui.toggle.html('Close');
        }
        this.body.show(this.view);
        this.model.bind('change:show', this.toggleBody);
        this.model.on('change:enabled', this.onToggleEnabled);
        return this.model.trigger('change:enabled', this.model, this.model.get('enabled'));
      };

      AccordionView.prototype.enable = function() {
        return this.model.set('enabled', true);
      };

      AccordionView.prototype.disable = function() {
        return this.model.set('enabled', false);
      };

      AccordionView.prototype.onToggleEnabled = function(model, isEnabled) {
        if (isEnabled) {
          return this.ui.head.removeClass('disabled');
        } else {
          return this.ui.head.addClass('disabled');
        }
      };

      AccordionView.prototype.show = function() {
        if (this.model.get('enabled')) {
          this.ui.body.slideDown();
          return this.ui.toggle.html('Close');
        }
      };

      AccordionView.prototype.hide = function() {
        if (this.model.get('enabled')) {
          this.ui.body.stop().slideUp();
          return this.ui.toggle.html('Open');
        }
      };

      AccordionView.prototype.toggleBody = function(model, show) {
        if (show) {
          return this.show();
        } else {
          return this.hide();
        }
      };

      return AccordionView;

    })(Backbone.Marionette.Layout);
  }));

}).call(this);
